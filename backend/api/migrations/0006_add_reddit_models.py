# Generated by Django 5.0.2 on 2025-10-22 14:04

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0005_add_technical_indicators'),
    ]

    operations = [
        migrations.CreateModel(
            name='RedditPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('post_id', models.CharField(db_index=True, help_text='Reddit post ID', max_length=20, unique=True)),
                ('subreddit', models.CharField(db_index=True, max_length=50)),
                ('title', models.TextField()),
                ('body', models.TextField(blank=True)),
                ('author', models.CharField(max_length=50)),
                ('url', models.URLField(max_length=500)),
                ('score', models.IntegerField(help_text='Reddit upvotes - downvotes')),
                ('upvote_ratio', models.FloatField(blank=True, null=True)),
                ('num_comments', models.IntegerField(default=0)),
                ('created_utc', models.DateTimeField(db_index=True, help_text='When post was created on Reddit')),
                ('fetched_at', models.DateTimeField(auto_now_add=True, help_text='When we fetched it')),
                ('content_hash', models.CharField(db_index=True, max_length=32)),
                ('is_relevant', models.BooleanField(default=False, help_text='Passed keyword filter')),
                ('mentions_nasdaq', models.BooleanField(default=False)),
                ('mentions_stock_tickers', models.TextField(blank=True, help_text='Comma-separated tickers mentioned')),
                ('base_sentiment', models.FloatField(blank=True, help_text='Base sentiment from -1 to 1', null=True)),
                ('surprise_factor', models.FloatField(default=1.0)),
                ('novelty_score', models.FloatField(default=1.0)),
                ('source_credibility', models.FloatField(default=0.5, help_text='Subreddit credibility')),
                ('recency_weight', models.FloatField(default=1.0)),
                ('post_score', models.FloatField(blank=True, help_text='Calculated post sentiment score', null=True)),
                ('weighted_contribution', models.FloatField(blank=True, null=True)),
                ('comments_analyzed', models.IntegerField(default=0)),
                ('is_analyzed', models.BooleanField(default=False)),
                ('sentiment_cached', models.BooleanField(default=False)),
                ('analysis_run', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reddit_posts', to='api.analysisrun')),
                ('ticker', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reddit_posts', to='api.ticker')),
            ],
            options={
                'verbose_name': 'Reddit Post',
                'verbose_name_plural': 'Reddit Posts',
                'ordering': ['-created_utc'],
            },
        ),
        migrations.CreateModel(
            name='RedditComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment_id', models.CharField(db_index=True, max_length=20, unique=True)),
                ('body', models.TextField()),
                ('author', models.CharField(max_length=50)),
                ('score', models.IntegerField(help_text='Reddit comment score')),
                ('is_submitter', models.BooleanField(default=False, help_text='Is comment by post author')),
                ('depth', models.IntegerField(default=0, help_text='Comment depth (0=top-level, 1=reply, etc.)')),
                ('created_utc', models.DateTimeField(db_index=True)),
                ('fetched_at', models.DateTimeField(auto_now_add=True)),
                ('content_hash', models.CharField(db_index=True, max_length=32)),
                ('base_sentiment', models.FloatField(blank=True, null=True)),
                ('comment_score_weighted', models.FloatField(blank=True, help_text='Sentiment weighted by comment upvotes', null=True)),
                ('is_analyzed', models.BooleanField(default=False)),
                ('parent_comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='api.redditcomment')),
                ('ticker', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reddit_comments', to='api.ticker')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='api.redditpost')),
            ],
            options={
                'verbose_name': 'Reddit Comment',
                'verbose_name_plural': 'Reddit Comments',
                'ordering': ['-score', '-created_utc'],
            },
        ),
        migrations.CreateModel(
            name='RedditAnalysisRun',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('reddit_composite_score', models.FloatField(help_text='Reddit sentiment from -100 to 100')),
                ('reddit_sentiment_label', models.CharField(blank=True, max_length=20)),
                ('avg_base_sentiment', models.FloatField()),
                ('avg_surprise_factor', models.FloatField(default=1.0)),
                ('avg_novelty', models.FloatField(default=1.0)),
                ('avg_source_credibility', models.FloatField(default=0.5)),
                ('avg_recency_weight', models.FloatField(default=1.0)),
                ('posts_analyzed', models.IntegerField(default=0)),
                ('comments_analyzed', models.IntegerField(default=0)),
                ('cached_posts', models.IntegerField(default=0)),
                ('new_posts', models.IntegerField(default=0)),
                ('subreddits_checked', models.IntegerField(default=0)),
                ('top_tickers_mentioned', models.TextField(blank=True, help_text='JSON list of most mentioned tickers')),
                ('ticker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reddit_analysis_runs', to='api.ticker')),
            ],
            options={
                'verbose_name': 'Reddit Analysis Run',
                'verbose_name_plural': 'Reddit Analysis Runs',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['ticker', '-timestamp'], name='api_reddita_ticker__f8ee51_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='redditpost',
            index=models.Index(fields=['post_id'], name='api_redditp_post_id_67106f_idx'),
        ),
        migrations.AddIndex(
            model_name='redditpost',
            index=models.Index(fields=['subreddit', '-created_utc'], name='api_redditp_subredd_5c5e4d_idx'),
        ),
        migrations.AddIndex(
            model_name='redditpost',
            index=models.Index(fields=['-created_utc'], name='api_redditp_created_982d22_idx'),
        ),
        migrations.AddIndex(
            model_name='redditpost',
            index=models.Index(fields=['is_relevant', '-created_utc'], name='api_redditp_is_rele_777199_idx'),
        ),
        migrations.AddIndex(
            model_name='redditcomment',
            index=models.Index(fields=['post', '-score'], name='api_redditc_post_id_e651cb_idx'),
        ),
        migrations.AddIndex(
            model_name='redditcomment',
            index=models.Index(fields=['comment_id'], name='api_redditc_comment_9d86f6_idx'),
        ),
    ]
